basePath: /api
definitions:
  ApiResponse:
    description: Generic API response
    properties:
      data: {}
      responseKey:
        type: string
    type: object
  CompaniesDetails:
    description: CompaniesDetails represents detailed information about a specific
      company.
    properties:
      createdAt:
        description: CreatedAt is the timestamp indicating when the company entry
          was created.
        type: string
      email:
        description: Email is the email address associated with the company.
        type: string
      id:
        description: ID is the unique identifier for the company.
        type: string
      name:
        description: Name is the name of the company.
        type: string
      website:
        description: Website is the website URL of the company.
        type: string
    type: object
  CompaniesPagination:
    description: CompaniesPagination represents the paginated list of companies.
    properties:
      items:
        description: Items is a slice containing individual company details.
        items:
          $ref: '#/definitions/CompaniesTable'
        type: array
      limit:
        description: Limit is the maximum number of items per page in the pagination.
        type: integer
      page:
        description: Page is the current page number in the pagination.
        type: integer
      totalCount:
        description: TotalCount is the total number of companies in the entire list.
        type: integer
    type: object
  CompaniesTable:
    description: CompaniesTable represents a single company entry in a table.
    properties:
      createdAt:
        description: CreatedAt is the timestamp indicating when the company entry
          was created.
        type: string
      email:
        description: Email is the email address associated with the company.
        type: string
      id:
        description: ID is the unique identifier for the company.
        type: string
      name:
        description: Name is the name of the company.
        type: string
    type: object
  CompanyIn:
    description: MailinglistIn represents the input structure for creating a new mailinglist.
    properties:
      description:
        description: Description is the description of the mailinglist.
        type: string
      name:
        description: Name is the name of the mailinglist.
        type: string
    type: object
  LoggedIn:
    description: LoggedIn represents the user details after successful login.
    properties:
      ID:
        description: ID is the unique identifier for the user.
        type: string
      email:
        description: Email is the email address of the user.
        type: string
      name:
        description: Name is the name of the user.
        type: string
      profilePicture:
        description: ProfilePicture is the URL or path to the user's profile picture.
        type: string
      workCompanyId:
        description: CompanyID is the unique identifier for the user's company.
        type: string
    type: object
  LoggedInResponse:
    description: LoggedInResponse represents the response structure after successful
      login.
    properties:
      accessToken:
        description: AccessToken is the token obtained after successful login for
          authentication purposes.
        type: string
      user:
        allOf:
        - $ref: '#/definitions/LoggedIn'
        description: User is the structure containing details of the logged-in user.
    type: object
  MailinglistDetails:
    description: MailinglistDetails represents detailed information about a specific
      mailinglist.
    properties:
      company_id:
        description: CompanyID is the ID of the company to which the mailinglist belongs.
        type: string
      contacts:
        description: Contacts is a list of contacts associated with the mailinglist.
        items:
          $ref: '#/definitions/domains.Contact'
        type: array
      created_at:
        description: CreatedAt is the timestamp indicating when the mailinglist entry
          was created.
        type: string
      created_by_user:
        description: CreatedByUserID is the ID of the user who created the mailinglist.
        type: string
      description:
        description: Description is the description of the mailinglist.
        type: string
      id:
        description: ID is the unique identifier for the mailinglist.
        type: string
      name:
        description: Name is the name of the mailinglist.
        type: string
      tags:
        description: Tags is a list of tag's UUID associated with the mailinglist.
        items:
          type: string
        type: array
    type: object
  MailinglistTable:
    description: MailinglistTable represents a single mailinglist entry in a table.
    properties:
      company_id:
        description: CompanyID is the ID of the company to which the mailinglist belongs.
        type: string
      created_at:
        description: CreatedAt is the timestamp indicating when the mailinglist entry
          was created.
        type: string
      created_by_user:
        description: CreatedByUserID is the ID of the user who created the mailinglist.
        type: string
      description:
        description: Description is the description of the mailinglist.
        type: string
      id:
        description: ID is the unique identifier for the mailinglist.
        type: string
      name:
        description: Name is the name of the mailinglist.
        type: string
    type: object
  MailinglistsPagination:
    description: MailinglistsPagination represents the paginated list of mailinglists.
    properties:
      items:
        description: Items is a slice containing individual mailinglist details.
        items:
          $ref: '#/definitions/MailinglistTable'
        type: array
      limit:
        description: Limit is the maximum number of items per page in the pagination.
        type: integer
      page:
        description: Page is the current page number in the pagination.
        type: integer
      totalCount:
        description: TotalCount is the total number of mailinglists in the entire
          list.
        type: integer
    type: object
  NotificationsCount:
    description: NotificationsCount represents the count of notifications.
    properties:
      count:
        description: Count is the number of notifications.
        type: integer
    type: object
  NotificationsDetails:
    description: NotificationsDetails represents detailed information about a specific
      notification.
    properties:
      content:
        description: Content is the textual content of the notification.
        type: string
      createdAt:
        description: CreatedAt is the timestamp indicating when the notification was
          created.
        type: string
      id:
        description: ID is the unique identifier for the notification.
        type: string
      seen:
        description: Seen is a boolean indicating whether the notification has been
          seen or not.
        type: boolean
      type:
        description: Type is the type or category of the notification.
        type: string
    type: object
  NotificationsIn:
    description: NotificationsIn represents the input structure for updating the "seen"
      status of notifications.
    properties:
      seen:
        description: Seen is a boolean indicating whether the notification has been
          seen or not. It is required.
        type: boolean
    required:
    - seen
    type: object
  RolesCount:
    description: RolesCount represents the count of roles.
    properties:
      count:
        description: Count is the number of roles.
        type: integer
    type: object
  RolesDetails:
    description: RolesDetails represents detailed information about a specific role.
    properties:
      companyID:
        description: CompanyID is the unique identifier for the company associated
          with the role.
        type: string
      companyName:
        description: CompanyName is the name of the company associated with the role.
        type: string
      createdAt:
        description: CreatedAt is the timestamp indicating when the role entry was
          created.
        type: string
      firstname:
        description: Name is the name of the role.
        type: string
      id:
        description: ID is the unique identifier for the role.
        type: string
    type: object
  RolesIn:
    description: RolesIn represents the input structure for creating a new role.
    properties:
      name:
        description: Name is the name of the role. It is required and should be between
          2 and 40 characters.
        maxLength: 40
        minLength: 2
        type: string
    required:
    - name
    type: object
  RolesList:
    description: RolesList represents a simplified version of the role for listing
      purposes.
    properties:
      id:
        description: ID is the unique identifier for the role.
        type: string
      name:
        description: Name is the name of the role.
        type: string
    type: object
  RolesPagination:
    description: RolesPagination represents the paginated list of roles.
    properties:
      items:
        description: Items is a slice containing individual role details.
        items:
          $ref: '#/definitions/RolesTable'
        type: array
      limit:
        description: Limit is the maximum number of items per page in the pagination.
        type: integer
      page:
        description: Page is the current page number in the pagination.
        type: integer
      totalCount:
        description: TotalCount is the total number of roles in the entire list.
        type: integer
    type: object
  RolesTable:
    description: RolesTable represents a single role entry in a table.
    properties:
      createdAt:
        description: CreatedAt is the timestamp indicating when the role entry was
          created.
        type: string
      id:
        description: ID is the unique identifier for the role.
        type: string
      name:
        description: Name is the name of the role.
        type: string
    type: object
  Signin:
    description: Signin represents the information required for signing in.
    properties:
      email:
        description: Email is the email address of the user. It is required, should
          be a valid email, and maximum length is 255 characters.
        maxLength: 255
        type: string
      password:
        description: Password is the user's password. It is required, and its length
          should be between 10 and 255 characters.
        maxLength: 255
        minLength: 10
        type: string
    required:
    - email
    - password
    type: object
  Signup:
    description: Signup represents the account information for signing up.
    properties:
      companyName:
        description: CompanyName is the name of the user's company. It is required
          and should be between 2 and 255 characters.
        maxLength: 255
        minLength: 2
        type: string
      email:
        description: Email is the email address of the user. It is required, should
          be a valid email, and maximum length is 255 characters.
        maxLength: 255
        type: string
      firstName:
        description: Firstname is the first name of the user. It should be between
          3 and 30 characters.
        maxLength: 30
        minLength: 3
        type: string
      lastName:
        description: Lastname is the last name of the user. It should be between 3
          and 35 characters.
        maxLength: 35
        minLength: 3
        type: string
      password:
        description: Password is the user's password. It is required, and its length
          should be between 10 and 255 characters.
        maxLength: 255
        minLength: 10
        type: string
    required:
    - companyName
    - email
    - firstName
    - lastName
    - password
    type: object
  UsersCount:
    description: UsersCount represents the count of users.
    properties:
      count:
        description: Count is the number of users.
        type: integer
    type: object
  UsersDetails:
    description: UsersDetails represents detailed information about a specific user.
    properties:
      country:
        description: Country is the country of residence of the user.
        type: string
      createdAt:
        description: CreatedAt is the timestamp indicating when the user entry was
          created.
        type: string
      email:
        description: Email is the email address of the user.
        type: string
      firstname:
        description: Firstname is the first name of the user.
        type: string
      id:
        description: ID is the unique identifier for the user.
        type: string
      lastname:
        description: Lastname is the last name of the user.
        type: string
      status:
        description: Status is a boolean indicating the current status of the user.
        type: boolean
    type: object
  UsersIn:
    description: UsersIn represents the input structure for creating a new user.
    properties:
      companyID:
        description: CompanyID is the unique identifier for the company associated
          with the user. It is required.
        type: string
      email:
        description: Email is the email address of the user. It is required, should
          be a valid email, and maximum length is 255 characters.
        maxLength: 255
        type: string
      firstName:
        description: Firstname is the first name of the user. It is required and should
          be between 3 and 30 characters.
        maxLength: 30
        minLength: 3
        type: string
      lastName:
        description: Lastname is the last name of the user. It is required and should
          be between 3 and 35 characters.
        maxLength: 35
        minLength: 3
        type: string
      password:
        description: Password is the user's password. It is required, and its length
          should be between 10 and 255 characters.
        maxLength: 255
        minLength: 10
        type: string
    required:
    - companyID
    - email
    - firstName
    - lastName
    - password
    type: object
  UsersList:
    description: UsersList represents a simplified version of the user for listing
      purposes.
    properties:
      id:
        description: ID is the unique identifier for the user.
        type: string
      name:
        description: Name is the full name of the user.
        type: string
    type: object
  UsersPagination:
    description: UsersPagination represents the paginated list of users.
    properties:
      items:
        description: Items is a slice containing individual user details.
        items:
          $ref: '#/definitions/UsersTable'
        type: array
      limit:
        description: Limit is the maximum number of items per page in the pagination.
        type: integer
      page:
        description: Page is the current page number in the pagination.
        type: integer
      totalCount:
        description: TotalCount is the total number of users in the entire list.
        type: integer
    type: object
  UsersTable:
    description: UsersTable represents a single user entry in a table.
    properties:
      createdAt:
        description: CreatedAt is the timestamp indicating when the user entry was
          created.
        type: string
      email:
        description: Email is the email address of the user.
        type: string
      firstname:
        description: Firstname is the first name of the user.
        type: string
      id:
        description: ID is the unique identifier for the user.
        type: string
      lastname:
        description: Lastname is the last name of the user.
        type: string
    type: object
  contacts.ContactDetails:
    description: ContactDetails represents detailed information about a specific contact.
    properties:
      created_at:
        description: CreatedAt is the timestamp indicating when the contact was created.
        type: string
      email:
        description: Contact's email address.
        type: string
      first_name:
        description: Contact's first name.
        type: string
      full_name:
        description: Contact's full name.
        type: string
      id:
        description: Unique identifier for the contact.
        type: string
      last_name:
        description: Contact's last name.
        type: string
      phone_number:
        description: Contact's phone number.
        type: string
      tags:
        description: Tags is a list of tag's UUID associated with the contact.
        items:
          type: string
        type: array
    type: object
  contacts.ContactIn:
    description: ContactIn represents the input structure for creating a new contact.
    properties:
      email:
        description: Contact's email address.
        type: string
      first_name:
        description: Contact's first name.
        type: string
      full_name:
        description: Contact's full name.
        type: string
      last_name:
        description: Contact's last name.
        type: string
      phone_number:
        description: Contact's phone number.
        type: string
    type: object
  contacts.ContactPaginator:
    description: ContactPaginator represents the paginated list of contacts.
    properties:
      items:
        description: Items is a slice containing individual contact details.
        items:
          $ref: '#/definitions/contacts.ContactTable'
        type: array
      limit:
        description: Limit is the maximum number of items per page in the pagination.
        type: integer
      page:
        description: Page is the current page number in the pagination.
        type: integer
      totalCount:
        description: TotalCount is the total number of contacts in the entire list.
        type: integer
    type: object
  contacts.ContactTable:
    description: ContactTable represents a single contact entry in a table.
    properties:
      created_at:
        description: CreatedAt is the timestamp indicating when the contact was created.
        type: string
      email:
        description: Contact's email address.
        type: string
      first_name:
        description: Contact's first name.
        type: string
      full_name:
        description: Contact's full name.
        type: string
      id:
        description: Unique identifier for the contact.
        type: string
      last_name:
        description: Contact's last name.
        type: string
      phone_number:
        description: Contact's phone number.
        type: string
    type: object
  domains.Contact:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: contact's email address (unique)
        type: string
      firstname:
        description: The contact's first name
        type: string
      fullName:
        description: contact's full name
        type: string
      id:
        type: integer
      lastname:
        description: The contact's last name
        type: string
      mailinglistsID:
        type: string
      phoneNumber:
        description: contact's email address (unique)
        type: string
      tags:
        description: List of tag's uuid associated with the contact
        items:
          type: string
        type: array
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  tags.TagDetails:
    description: TagDetails represents detailed information about a specific tag.
    properties:
      color:
        description: Tag's color.
        type: string
      company_id:
        description: Tag's company
        type: string
      created_at:
        description: CreatedAt is the timestamp indicating when the tag was created.
        type: string
      id:
        description: Unique identifier for the tag.
        type: string
      name:
        description: Tag's  name.
        type: string
    type: object
  tags.TagIn:
    description: TagIn represents the input structure for creating a new tag.
    properties:
      color:
        description: Tag's color.
        type: string
      name:
        description: Tag's name.
        type: string
    type: object
  tags.TagPagination:
    description: TagPagination represents the paginated list of tags.
    properties:
      items:
        description: Items is a slice containing individual tag details.
        items:
          $ref: '#/definitions/tags.TagTable'
        type: array
      limit:
        description: Limit is the maximum number of items per page in the pagination.
        type: integer
      page:
        description: Page is the current page number in the pagination.
        type: integer
      totalCount:
        description: TotalCount is the total number of tags in the entire list.
        type: integer
    type: object
  tags.TagTable:
    description: TagTable represents a single tag entry in a table.
    properties:
      color:
        description: Tag's color.
        type: string
      id:
        description: Unique identifier for the tag.
        type: string
      name:
        description: Tag's full name.
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: h.manai@tunisiancloud.com
    name: Hedi Manai
  description: A basic template for managing your project using Golang REST APIs.
  title: Project Name
  version: "0.1"
paths:
  /:companyID/mailinglist/:mailinglistID/contacts:
    get:
      description: Get all contacts.
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contacts.ContactPaginator'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get contacts
      tags:
      - Contacts
    post:
      consumes:
      - application/json
      description: Create a new contact.
      parameters:
      - description: Contact query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contacts.ContactIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Create contact
      tags:
      - Contacts
  /:companyID/mailinglist/:mailinglistID/contacts/{ID}:
    delete:
      description: Delete one contact.
      parameters:
      - description: Contact ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Delete contact
      tags:
      - Contacts
    get:
      description: Get one Contact.
      parameters:
      - description: Contact ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contacts.ContactDetails'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get Contact
      tags:
      - Contacts
    put:
      consumes:
      - application/json
      description: Update contact.
      parameters:
      - description: ContactID
        in: path
        name: ID
        required: true
        type: string
      - description: Contact query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contacts.ContactIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Update contact
      tags:
      - Contacts
  /{companyID}/Tags:
    post:
      consumes:
      - application/json
      description: Create a new Tag.
      parameters:
      - description: Tag query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/tags.TagIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Create Tag
      tags:
      - tags
  /{companyID}/mailinglist:
    get:
      description: Get all mailinglists.
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MailinglistsPagination'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get mailinglists
      tags:
      - mailinglists
    post:
      consumes:
      - application/json
      description: Create a new Mailinglist.
      parameters:
      - description: Mailinglist query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CompanyIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Create Mailinglist
      tags:
      - mailinglists
  /{companyID}/mailinglist/{mailinglistID}:
    delete:
      description: Delete one mailinglist.
      parameters:
      - description: Mailinglist ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Delete mailinglist
      tags:
      - mailinglists
    get:
      description: Get one Mailinglist.
      parameters:
      - description: Mailinglist ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MailinglistDetails'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get Mailinglist
      tags:
      - mailinglists
    put:
      consumes:
      - application/json
      description: Update mailinglist.
      parameters:
      - description: Mailinglist ID
        in: path
        name: ID
        required: true
        type: string
      - description: Mailinglist query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CompanyIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Update mailinglist
      tags:
      - mailinglists
  /{companyID}/tags:
    get:
      description: Get all tags.
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tags.TagPagination'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get tags
      tags:
      - tags
  /{companyID}/tags/{ID}:
    delete:
      description: Delete one tag.
      parameters:
      - description: Tag ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Delete tag
      tags:
      - tags
    get:
      description: Get one Tag.
      parameters:
      - description: Tag ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tags.TagDetails'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get Tag
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Update tag.
      parameters:
      - description: Tag ID
        in: path
        name: ID
        required: true
        type: string
      - description: Tag query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/tags.TagIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Update tag
      tags:
      - tags
  /{companyID}/tags/{ID}/contact/{contactID}:
    post:
      description: Assaign one tag to a contact.
      parameters:
      - description: Tag ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Assaign tag to a contact
      tags:
      - tags
  /{companyID}/tags/{ID}/mailinglist/{mailinglistID}:
    post:
      description: Assaign one tag to a mailinglist.
      parameters:
      - description: Tag ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Assaign tag to a mailinglist
      tags:
      - tags
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate and log in a user.
      parameters:
      - description: User query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/Signin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/LoggedInResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Signin
      tags:
      - Authentification
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account.
      parameters:
      - description: User query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/Signup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Signup
      tags:
      - Authentification
  /companies:
    get:
      description: Get all companies.
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CompaniesPagination'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get companies
      tags:
      - Companies
    post:
      consumes:
      - application/json
      description: Create a new company.
      parameters:
      - description: Company query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CompanyIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Create company
      tags:
      - Companies
  /companies/{ID}:
    delete:
      description: Delete one company.
      parameters:
      - description: Company ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Delete company
      tags:
      - Companies
    get:
      description: Get one company.
      parameters:
      - description: Company ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CompaniesDetails'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Get company
      tags:
      - Companies
    put:
      consumes:
      - application/json
      description: Update company.
      parameters:
      - description: Company ID
        in: path
        name: ID
        required: true
        type: string
      - description: Company query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CompanyIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      summary: Update company
      tags:
      - Companies
  /notifications/{userID}:
    get:
      description: Get all notifications.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/NotificationsDetails'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get notifications
      tags:
      - Notifications
  /notifications/{userID}/{ID}:
    delete:
      consumes:
      - application/json
      description: Delete one notification.
      parameters:
      - description: Company ID
        in: path
        name: userID
        required: true
        type: string
      - description: Notification ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete notification
      tags:
      - Notifications
    get:
      description: Get one notification.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Notification ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NotificationsDetails'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get notification
      tags:
      - Notifications
    put:
      consumes:
      - application/json
      description: Update one notification.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Notification ID
        in: path
        name: ID
        required: true
        type: string
      - description: Notification query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/NotificationsIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Update notification
      tags:
      - Notifications
  /notifications/{userID}/count:
    get:
      description: Get all notifications count.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NotificationsCount'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get notifications count
      tags:
      - Notifications
  /roles/{companyID}:
    get:
      description: Get all roles.
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RolesPagination'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: Role query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/RolesIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Create role
      tags:
      - Roles
  /roles/{companyID}/{ID}:
    delete:
      description: Delete one role.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: Role ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete role
      tags:
      - Roles
    get:
      description: Get one role.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: Role ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RolesDetails'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update one role.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: Role ID
        in: path
        name: ID
        required: true
        type: string
      - description: Role query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/RolesIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Update role
      tags:
      - Roles
  /roles/{companyID}/count:
    get:
      description: Get number of all roles.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RolesCount'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get number of  roles
      tags:
      - Roles
  /roles/{companyID}/list:
    get:
      description: Get list of all roles.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RolesList'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get list of  roles
      tags:
      - Roles
  /users/{companyID}:
    get:
      description: Get all users.
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UsersPagination'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: User query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UsersIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Create user
      tags:
      - Users
  /users/{companyID}/{ID}:
    delete:
      description: Delete one user.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: User ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Get one user.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: User ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UsersDetails'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      - description: User ID
        in: path
        name: ID
        required: true
        type: string
      - description: User query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UsersIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - Users
  /users/{companyID}/count:
    get:
      description: Get number of all users.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UsersCount'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get number of  users
      tags:
      - Users
  /users/{companyID}/list:
    get:
      description: Get list of all users.
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/UsersList'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - ApiKeyAuth: []
      summary: Get list of  users
      tags:
      - Users
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
