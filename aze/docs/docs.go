// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Hedi Manai",
            "email": "h.manai@tunisiancloud.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/signin": {
            "post": {
                "description": "Authenticate and log in a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentification"
                ],
                "summary": "Signin",
                "parameters": [
                    {
                        "description": "User query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Signin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoggedInResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Create a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentification"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "User query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Signup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/companies": {
            "get": {
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CompaniesPagination"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "description": "Company query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CompanyIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/companies/{ID}": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CompaniesDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Company query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CompanyIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{userID}": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NotificationsDetails"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{userID}/count": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NotificationsCount"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{userID}/{ID}": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NotificationsDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notification query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationsIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/roles/{companyID}": {
            "get": {
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RolesPagination"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RolesIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/roles/{companyID}/count": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RolesCount"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/roles/{companyID}/list": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RolesList"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/roles/{companyID}/{ID}": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RolesDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RolesIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/users/{companyID}": {
            "get": {
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UsersPagination"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UsersIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/users/{companyID}/count": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UsersCount"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/users/{companyID}/list": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UsersList"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/users/{companyID}/{ID}": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UsersDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UsersIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ApiResponse": {
            "description": "Generic API response",
            "type": "object",
            "properties": {
                "data": {},
                "responseKey": {
                    "type": "string"
                }
            }
        },
        "CompaniesDetails": {
            "description": "CompaniesDetails represents detailed information about a specific company.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the timestamp indicating when the company entry was created.",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email address associated with the company.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the company.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the company.",
                    "type": "string"
                },
                "website": {
                    "description": "Website is the website URL of the company.",
                    "type": "string"
                }
            }
        },
        "CompaniesPagination": {
            "description": "CompaniesPagination represents the paginated list of companies.",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a slice containing individual company details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompaniesTable"
                    }
                },
                "limit": {
                    "description": "Limit is the maximum number of items per page in the pagination.",
                    "type": "integer"
                },
                "page": {
                    "description": "Page is the current page number in the pagination.",
                    "type": "integer"
                },
                "totalCount": {
                    "description": "TotalCount is the total number of companies in the entire list.",
                    "type": "integer"
                }
            }
        },
        "CompaniesTable": {
            "description": "CompaniesTable represents a single company entry in a table.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the timestamp indicating when the company entry was created.",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email address associated with the company.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the company.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the company.",
                    "type": "string"
                }
            }
        },
        "CompanyIn": {
            "description": "CompanyIn represents the input structure for creating a new company.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of the company. It is required and should be between 3 and 30 characters.",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                }
            }
        },
        "LoggedIn": {
            "description": "LoggedIn represents the user details after successful login.",
            "type": "object",
            "properties": {
                "ID": {
                    "description": "ID is the unique identifier for the user.",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email address of the user.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the user.",
                    "type": "string"
                },
                "profilePicture": {
                    "description": "ProfilePicture is the URL or path to the user's profile picture.",
                    "type": "string"
                },
                "workCompanyId": {
                    "description": "CompanyID is the unique identifier for the user's company.",
                    "type": "string"
                }
            }
        },
        "LoggedInResponse": {
            "description": "LoggedInResponse represents the response structure after successful login.",
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "AccessToken is the token obtained after successful login for authentication purposes.",
                    "type": "string"
                },
                "user": {
                    "description": "User is the structure containing details of the logged-in user.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/LoggedIn"
                        }
                    ]
                }
            }
        },
        "NotificationsCount": {
            "description": "NotificationsCount represents the count of notifications.",
            "type": "object",
            "properties": {
                "count": {
                    "description": "Count is the number of notifications.",
                    "type": "integer"
                }
            }
        },
        "NotificationsDetails": {
            "description": "NotificationsDetails represents detailed information about a specific notification.",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content is the textual content of the notification.",
                    "type": "string"
                },
                "createdAt": {
                    "description": "CreatedAt is the timestamp indicating when the notification was created.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the notification.",
                    "type": "string"
                },
                "seen": {
                    "description": "Seen is a boolean indicating whether the notification has been seen or not.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Type is the type or category of the notification.",
                    "type": "string"
                }
            }
        },
        "NotificationsIn": {
            "description": "NotificationsIn represents the input structure for updating the \"seen\" status of notifications.",
            "type": "object",
            "required": [
                "seen"
            ],
            "properties": {
                "seen": {
                    "description": "Seen is a boolean indicating whether the notification has been seen or not. It is required.",
                    "type": "boolean"
                }
            }
        },
        "RolesCount": {
            "description": "RolesCount represents the count of roles.",
            "type": "object",
            "properties": {
                "count": {
                    "description": "Count is the number of roles.",
                    "type": "integer"
                }
            }
        },
        "RolesDetails": {
            "description": "RolesDetails represents detailed information about a specific role.",
            "type": "object",
            "properties": {
                "companyID": {
                    "description": "CompanyID is the unique identifier for the company associated with the role.",
                    "type": "string"
                },
                "companyName": {
                    "description": "CompanyName is the name of the company associated with the role.",
                    "type": "string"
                },
                "createdAt": {
                    "description": "CreatedAt is the timestamp indicating when the role entry was created.",
                    "type": "string"
                },
                "firstname": {
                    "description": "Name is the name of the role.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the role.",
                    "type": "string"
                }
            }
        },
        "RolesIn": {
            "description": "RolesIn represents the input structure for creating a new role.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of the role. It is required and should be between 2 and 40 characters.",
                    "type": "string",
                    "maxLength": 40,
                    "minLength": 2
                }
            }
        },
        "RolesList": {
            "description": "RolesList represents a simplified version of the role for listing purposes.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier for the role.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the role.",
                    "type": "string"
                }
            }
        },
        "RolesPagination": {
            "description": "RolesPagination represents the paginated list of roles.",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a slice containing individual role details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RolesTable"
                    }
                },
                "limit": {
                    "description": "Limit is the maximum number of items per page in the pagination.",
                    "type": "integer"
                },
                "page": {
                    "description": "Page is the current page number in the pagination.",
                    "type": "integer"
                },
                "totalCount": {
                    "description": "TotalCount is the total number of roles in the entire list.",
                    "type": "integer"
                }
            }
        },
        "RolesTable": {
            "description": "RolesTable represents a single role entry in a table.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the timestamp indicating when the role entry was created.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the role.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the role.",
                    "type": "string"
                }
            }
        },
        "Signin": {
            "description": "Signin represents the information required for signing in.",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email is the email address of the user. It is required, should be a valid email, and maximum length is 255 characters.",
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "description": "Password is the user's password. It is required, and its length should be between 10 and 255 characters.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 10
                }
            }
        },
        "Signup": {
            "description": "Signup represents the account information for signing up.",
            "type": "object",
            "required": [
                "companyName",
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "companyName": {
                    "description": "CompanyName is the name of the user's company. It is required and should be between 2 and 255 characters.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "email": {
                    "description": "Email is the email address of the user. It is required, should be a valid email, and maximum length is 255 characters.",
                    "type": "string",
                    "maxLength": 255
                },
                "firstName": {
                    "description": "Firstname is the first name of the user. It should be between 3 and 30 characters.",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                },
                "lastName": {
                    "description": "Lastname is the last name of the user. It should be between 3 and 35 characters.",
                    "type": "string",
                    "maxLength": 35,
                    "minLength": 3
                },
                "password": {
                    "description": "Password is the user's password. It is required, and its length should be between 10 and 255 characters.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 10
                }
            }
        },
        "UsersCount": {
            "description": "UsersCount represents the count of users.",
            "type": "object",
            "properties": {
                "count": {
                    "description": "Count is the number of users.",
                    "type": "integer"
                }
            }
        },
        "UsersDetails": {
            "description": "UsersDetails represents detailed information about a specific user.",
            "type": "object",
            "properties": {
                "country": {
                    "description": "Country is the country of residence of the user.",
                    "type": "string"
                },
                "createdAt": {
                    "description": "CreatedAt is the timestamp indicating when the user entry was created.",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email address of the user.",
                    "type": "string"
                },
                "firstname": {
                    "description": "Firstname is the first name of the user.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the user.",
                    "type": "string"
                },
                "lastname": {
                    "description": "Lastname is the last name of the user.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is a boolean indicating the current status of the user.",
                    "type": "boolean"
                }
            }
        },
        "UsersIn": {
            "description": "UsersIn represents the input structure for creating a new user.",
            "type": "object",
            "required": [
                "companyID",
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "companyID": {
                    "description": "CompanyID is the unique identifier for the company associated with the user. It is required.",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email address of the user. It is required, should be a valid email, and maximum length is 255 characters.",
                    "type": "string",
                    "maxLength": 255
                },
                "firstName": {
                    "description": "Firstname is the first name of the user. It is required and should be between 3 and 30 characters.",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                },
                "lastName": {
                    "description": "Lastname is the last name of the user. It is required and should be between 3 and 35 characters.",
                    "type": "string",
                    "maxLength": 35,
                    "minLength": 3
                },
                "password": {
                    "description": "Password is the user's password. It is required, and its length should be between 10 and 255 characters.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 10
                }
            }
        },
        "UsersList": {
            "description": "UsersList represents a simplified version of the user for listing purposes.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier for the user.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the full name of the user.",
                    "type": "string"
                }
            }
        },
        "UsersPagination": {
            "description": "UsersPagination represents the paginated list of users.",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a slice containing individual user details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UsersTable"
                    }
                },
                "limit": {
                    "description": "Limit is the maximum number of items per page in the pagination.",
                    "type": "integer"
                },
                "page": {
                    "description": "Page is the current page number in the pagination.",
                    "type": "integer"
                },
                "totalCount": {
                    "description": "TotalCount is the total number of users in the entire list.",
                    "type": "integer"
                }
            }
        },
        "UsersTable": {
            "description": "UsersTable represents a single user entry in a table.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the timestamp indicating when the user entry was created.",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email address of the user.",
                    "type": "string"
                },
                "firstname": {
                    "description": "Firstname is the first name of the user.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the user.",
                    "type": "string"
                },
                "lastname": {
                    "description": "Lastname is the last name of the user.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Project Name",
	Description:      "A basic template for managing your project using Golang REST APIs.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
